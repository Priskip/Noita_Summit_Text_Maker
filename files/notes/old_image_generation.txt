//If something is selected
				if (just_name || two_player_left || two_player_right && streamer_list.size() > 0) {
					for (int streamer_i = 0; streamer_i < streamer_list.size(); streamer_i++) {
						int horizontal_pos = 0;
						std::string name = streamer_list[streamer_i]; //casting to string to use string library tools
						Image canvas(70 * name.length(), 87); //make an image to place all letters into

						Image letter_pallete; //Loads the Noita font
						letter_pallete.readImageIntoPixelData("files/images/font/font_main.png");

						Image brush; //brush for writing into canvas
						Image width_detection;

						//std::cout << "Char      Green     Red     Width     Hor_Pos   " << std::endl;

						for (int i = 0; i < name.size(); i++) {

							int char_position = -1;
							int green_pixel_pos = 0;
							int red_pixel_pos = 0;

							for (int j = 0; j < character_list.size(); j++) {
								if (name[i] == character_list[j]) {
									char_position = j;
									break;
								}
							}
							if (char_position != -1) {
								brush = letter_pallete.getSubselectionOfImage(1 + 73 * char_position, 1, 71 + 73 * char_position, 88);
								width_detection = letter_pallete.getSubselectionOfImage(1 + 73 * char_position, 0, 71 + 73 * char_position, 1);

								for (int i = 0; i < 70; i++) {
									width_detection.readRGBAatSpeicificPixel(i, 0);

									if (width_detection.rgba[0] == 0 && width_detection.rgba[1] == 255 &&
										width_detection.rgba[2] == 0 && width_detection.rgba[3] == 255) {
										green_pixel_pos = i;
									}

									if (width_detection.rgba[0] == 255 && width_detection.rgba[1] == 0 &&
										width_detection.rgba[2] == 0 && width_detection.rgba[3] == 255) {
										red_pixel_pos = i;
									}
								}

								//std::cout << name[i] << blankSpaces(9)
								//	<< unsignedIntToDecString(green_pixel_pos, 3) << blankSpaces(7)
								//	<< unsignedIntToDecString(red_pixel_pos, 3) << blankSpaces(7)
								//	<< unsignedIntToDecString(red_pixel_pos - green_pixel_pos, 3) << blankSpaces(7)
								//	<< unsignedIntToDecString(horizontal_pos, 3) << std::endl;

								brush = brush.getSubselectionOfImage(green_pixel_pos, 1, red_pixel_pos, 87);
								canvas.insertImage(brush, horizontal_pos, 0, true);

								horizontal_pos = horizontal_pos + (red_pixel_pos - green_pixel_pos);
							}
							else
							{
								horizontal_pos = horizontal_pos + 20;
							}

						}
						canvas = canvas.getSubselectionOfImage(0, 0, horizontal_pos + 1, 87);


						//Write to file locations
						std::replace(name.begin(), name.end(), '.', '_');
						if (just_name) {
							canvas.writePixelDataIntoImage("files/images/just_name/" + name + ".png");
						}

						if (two_player_left) {
							Image big_picture(1920, 1080);
							big_picture.insertImage(canvas, two_player_left_image_pos_x, two_player_left_image_pos_y, true);
							big_picture.writePixelDataIntoImage("files/images/2_player_left/" + name + ".png");
						}

						if (two_player_right) {
							Image big_picture(1920, 1080);
							big_picture.insertImage(canvas, two_player_right_image_pos_x - canvas.width, two_player_right_image_pos_y, true);
							big_picture.writePixelDataIntoImage("files/images/2_player_right/" + name + ".png");
						}
					}
				}